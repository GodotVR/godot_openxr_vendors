# Workflow to automatically create the godot openxr loaders addon
name: Build on push

on: [push, pull_request]

env:
  # Only used for the cache key. Increment version to force clean build.
  GODOT_BASE_BRANCH: master

jobs:
  setup:
    name: Get Godot API file
    runs-on: ubuntu-24.04
    steps:
      - name: Dump Godot API file
        run: |
          # Testing with a fixed editor version
          curl -OL https://github.com/V-Sekai/world-godot/releases/download/latest.v-sekai-editor-167/v-sekai-godot-linuxbsd.zip
          unzip v-sekai-godot-linuxbsd.zip
          chmod +x ./v-sekai-godot-linuxbsd/godot.linuxbsd.editor.double.x86_64
          ./v-sekai-godot-linuxbsd/godot.linuxbsd.editor.double.x86_64 --headless --dump-extension-api
          ./v-sekai-godot-linuxbsd/godot.linuxbsd.editor.double.x86_64 --headless --dump-gdextension-interface

      - name: Upload build files (artifacts)
        uses: actions/upload-artifact@v4
        with:
          name: godot-api-file
          path: |
            ./extension_api.json
            ./gdextension_interface.h

  build:
    name: Building for ${{ matrix.name }} (${{ matrix.os }})
    needs: setup
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - name: 🐧 Linux (x86_64, GCC)
            os: ubuntu-24.04
            platform: linux
            flags: arch=x86_64
            artifact_name: build-files-linux-x86_64
            artifact_path: aar/demo/addons/godotopenxrvendors/.bin/linux/*/*/*.so
            cache-name: linux-x86_64
          # Not sure how to cross compile these
          # - name: Linux (arm64)
          #   os: ubuntu-20.04
          #   platform: linux
          #   flags: arch=arm64
          #   artifact_name: build-files-linux-arm64
          #   artifact_path: aar/demo/addons/godotopenxrvendors/.bin/linux/*/*/*.so
          #   cache-name: linux-arm64
          # - name: Linux (rv64)
          #  os: ubuntu-20.04
          #  platform: linux
          #  flags: arch=rv64
          #  artifact_name: build-files-linux-rv64
          #  artifact_path: aar/demo/addons/godotopenxrvendors/.bin/linux/*/*/*.so
          #  cache-name: linux-rv64
          - name: 🏁 Windows (x86_64, MSVC)
            os: windows-latest
            platform: windows
            artifact_name: build-files-windows
            artifact_path: aar/demo/addons/godotopenxrvendors/.bin/windows/*/*/*.dll
            cache-name: windows-x86_64-msvc
          - name: 🍎 MacOS (universal)
            os: macos-latest
            platform: macos
            flags: arch=universal
            artifact_name: build-files-macos
            artifact_path: aar/demo/addons/godotopenxrvendors/.bin/macos/*/*.framework
            cache-name: macos-universal
          - name: 🤖 Android (arm64)
            os: ubuntu-24.04
            platform: android
            flags: arch=arm64
            artifact_name: build-files-android-arm64
            artifact_path: |
              aar/plugin/src/main/libs/*/*/*/*.so
            cache-name: android-arm64
          - name: 🤖 Android (x86_64)
            os: ubuntu-24.04
            platform: android
            flags: arch=x86_64
            artifact_name: build-files-android-x86_64
            artifact_path: |
              aar/plugin/src/main/libs/*/*/*/*.so
            cache-name: android-x86_64


    # Note, to satisfy the asset library we need to make sure our zip files have a root folder
    # this is why we checkout into aar and build into asset
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: aar
          submodules: recursive
      - name: Set up Python (for SCons)
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
     # - name: Android dependencies
     #   uses: nttld/setup-ndk@v1
     #   with:
     #     ndk-version: r23c
     #     link-to-sdk: true
     #   if: matrix.platform == 'android'
      - name: Install scons
        run: |
          python -m pip install scons==4.0.0

      - name: Install ndk
        if: matrix.platform == 'android'
        run: |
          sudo apt install -y just
          export ANDROID_SDK_ROOT=/usr/local/lib/android/sdk/
          curl -sS -OL 'https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip'
          unzip commandlinetools-linux-11076708_latest.zip
          mkdir -p ${ANDROID_SDK_ROOT}
          yes | ./cmdline-tools/bin/sdkmanager --sdk_root=${ANDROID_SDK_ROOT} --licenses
          yes 2>/dev/null | ./cmdline-tools/bin/sdkmanager --sdk_root=${ANDROID_SDK_ROOT} "ndk;23.2.8568313" 'cmdline-tools;latest' 'build-tools;34.0.0' 'platforms;android-34' 'cmake;3.22.1'

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Overwrite api files
        if: matrix.platform != 'windows'
        run: |
          # Is gdextension_interface.h overwrite required for double builds?
          mv -v -f ./godot-api-file/extension_api.json aar/thirdparty/godot_cpp_gdextension_api/extension_api.json
          mv -v -f ./godot-api-file/gdextension_interface.h aar/thirdparty/godot-cpp/gdextension/gdextension_interface.h
      - name: Overwrite api files win
        if: matrix.platform == 'windows'
        run: |
          ls -R
          mv -v -Force ./godot-api-file/extension_api.json aar/thirdparty/godot_cpp_gdextension_api/extension_api.json
          mv -v -Force ./godot-api-file/gdextension_interface.h aar/thirdparty/godot-cpp/gdextension/gdextension_interface.h

      - name: Create extension library
        run: |
          cd aar
          scons platform=${{ matrix.platform }} target=template_debug precision=double ${{ matrix.flags }} custom_api_file=thirdparty/godot_cpp_gdextension_api/extension_api.json build_profile=thirdparty/godot_cpp_build_profile/build_profile.json
          scons platform=${{ matrix.platform }} target=template_release precision=double ${{ matrix.flags }} custom_api_file=thirdparty/godot_cpp_gdextension_api/extension_api.json build_profile=thirdparty/godot_cpp_build_profile/build_profile.json
          cd ..
      - name: Upload build files (artifacts)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.artifact_path }}

  asset:
    name: Assembling the asset
    runs-on: ubuntu-20.04
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: aar
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4
      - name: Setup java
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "adopt"
     # - name: Validate Gradle wrapper
     #   uses: gradle/actions/wrapper-validation@v3
      - name: Copy Android binaries
        run: |
          mkdir aar/plugin/src/main/libs
          cp -r build-files-android-arm64/* aar/plugin/src/main/libs/
          cp -r build-files-android-x86_64/* aar/plugin/src/main/libs/
      - name: Create Godot OpenXR Vendors AARs
        run: |
          cd aar
          ./gradlew build
          cd ..
      - name: Create Godot OpenXR Vendors Addon
        run: |
          mkdir asset
          cp -r aar/demo/addons asset
          cp aar/CHANGES.md asset/addons/godotopenxrvendors/GodotOpenXRVendors_CHANGES.md
      - name: Adding vendor licences
        run: |
          mkdir -p asset/addons/godotopenxrvendors/meta/
          cp aar/thirdparty/ovr_openxr_mobile_sdk/LICENSE.txt asset/addons/godotopenxrvendors/meta/

          mkdir -p asset/addons/godotopenxrvendors/pico/
          cp aar/thirdparty/khronos_openxr_sdk/LICENSE asset/addons/godotopenxrvendors/pico/LICENSE

          mkdir -p asset/addons/godotopenxrvendors/khronos/
          cp aar/thirdparty/khronos_openxr_sdk/LICENSE asset/addons/godotopenxrvendors/khronos/LICENSE

          mkdir -p asset/addons/godotopenxrvendors/magicleap/
          cp aar/thirdparty/khronos_openxr_sdk/LICENSE asset/addons/godotopenxrvendors/magicleap/LICENSE

      - name: Copying artifacts
        run: |
          mkdir -p asset/addons/godotopenxrvendors/.bin/android/template_debug/arm64
          mkdir -p asset/addons/godotopenxrvendors/.bin/android/template_release/arm64
          cp -r build-files-android-arm64/debug/*/*/*.so asset/addons/godotopenxrvendors/.bin/android/template_debug/arm64/
          cp -r build-files-android-arm64/release/*/*/*.so asset/addons/godotopenxrvendors/.bin/android/template_release/arm64/

          mkdir -p asset/addons/godotopenxrvendors/.bin/android/template_debug/x86_64
          mkdir -p asset/addons/godotopenxrvendors/.bin/android/template_release/x86_64
          cp -r build-files-android-x86_64/debug/*/*/*.so asset/addons/godotopenxrvendors/.bin/android/template_debug/x86_64/
          cp -r build-files-android-x86_64/release/*/*/*.so asset/addons/godotopenxrvendors/.bin/android/template_release/x86_64/

          mkdir -p asset/addons/godotopenxrvendors/.bin/linux/
          cp -r build-files-linux-x86_64/* asset/addons/godotopenxrvendors/.bin/linux/

          mkdir -p asset/addons/godotopenxrvendors/.bin/windows/
          cp -r build-files-windows/* asset/addons/godotopenxrvendors/.bin/windows/

          mkdir -p asset/addons/godotopenxrvendors/.bin/macos/
          cp -r build-files-macos/* asset/addons/godotopenxrvendors/.bin/macos/

      - name: Create Godot OpenXR Vendor addon artifact
        uses: actions/upload-artifact@v4
        with:
          name: GodotOpenXRVendorsAddon
          include-hidden-files: true
          path: |
            asset
      - name: Zip addon
        run: |
          zip -qq -r godotopenxrvendorsaddon.zip asset
        if: github.event_name == 'push'
        # && startsWith(github.ref, 'refs/tags')

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: XR-plugin-${{ github.run_number }}
          release_name: Latest Release of V-Sekai XR plugin
          draft: false
          prerelease: true

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./godotopenxrvendorsaddon.zip
          asset_name: godotopenxrvendorsaddon.zip
          asset_content_type: application/zip
