plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
}

ext {
    PUBLISH_ARTIFACT_ID = 'godot-openxr-vendors'
}

apply from: "../scripts/publish-module.gradle"

android {
    compileSdk versions.compileSdk
    ndkVersion versions.ndkVersion

    defaultConfig {
        minSdk versions.minSdk
        targetSdk versions.targetSdk
        versionName getReleaseVersion()

        setProperty("archivesBaseName", "godotopenxr")

        ndk {
            //noinspection ChromeOsAbiSupport
            abiFilters "arm64-v8a"
        }
    }
    externalNativeBuild {
        cmake {
            path file('CMakeLists.txt')
            version versions.cmakeVersion
        }
    }

    namespace = "org.godotengine.openxr.vendors"

    flavorDimensions = ["vendor"]
    productFlavors {
        khronos {
            dimension "vendor"
            ndk {
                //noinspection ChromeOsAbiSupport
                abiFilters 'arm64-v8a', 'x86_64'
            }
            externalNativeBuild {
                cmake {
                    arguments "-DFLAVOR=khronos"
                }
            }
        }
        lynx {
            dimension "vendor"
            externalNativeBuild {
                cmake {
                    arguments "-DFLAVOR=lynx"
                }
            }
        }
        magicleap {
            dimension "vendor"
            externalNativeBuild {
                cmake {
                    arguments "-DFLAVOR=magicleap"
                }
            }
            ndk {
                //noinspection ChromeOsAbiSupport
                abiFilters 'arm64-v8a', 'x86_64'
            }
        }
        meta {
            dimension "vendor"
            externalNativeBuild {
                cmake {
                    arguments "-DFLAVOR=meta"
                }
            }
        }
        pico {
            dimension "vendor"
            externalNativeBuild {
                cmake {
                    arguments "-DFLAVOR=pico"
                }
            }
        }
    }

    packagingOptions {
        doNotStrip '**/*.so'
    }

    compileOptions {
        sourceCompatibility versions.javaVersion
        targetCompatibility versions.javaVersion
    }

    kotlinOptions {
        jvmTarget = versions.javaVersion
    }

    publishing {
        singleVariant("khronosRelease") {
            withSourcesJar()
            withJavadocJar()
        }

        singleVariant("lynxRelease") {
            withSourcesJar()
            withJavadocJar()
        }

        singleVariant("magicleapRelease") {
            withSourcesJar()
            withJavadocJar()
        }

        singleVariant("metaRelease") {
            withSourcesJar()
            withJavadocJar()
        }

        singleVariant("picoRelease") {
            withSourcesJar()
            withJavadocJar()
        }
    }

    buildFeatures {
        prefab true
        prefabPublishing true
    }

    prefab {
        godotopenxrvendors {
            headers "src/main/cpp/include"
        }
    }
}

dependencies {
    compileOnly libraries.godotAndroidLib

    // Khronos dependencies
    khronosImplementation "org.khronos.openxr:openxr_loader_for_android:$versions.openxrVersion"

    // Magicleap dependencies
    magicleapImplementation "org.khronos.openxr:openxr_loader_for_android:$versions.openxrVersion"

    // Pico dependencies
    picoImplementation "org.khronos.openxr:openxr_loader_for_android:$versions.openxrVersion"
}

task cleanAssets(type: Delete) {
    // Delete the 'addons' directory in the 'assets' folder
    delete("src/main/assets/addons")
}

task cleanCxx(type: Delete) {
    delete(".cxx")
}

task copyDebugAARToAddons(type: Copy) {
    from 'build/outputs/aar'
    include 'godotopenxr-*-debug.aar'
    into '../demo/addons/godotopenxrvendors/.bin/android/debug'
}

task copyReleaseAARToAddons(type: Copy) {
    from 'build/outputs/aar'
    include 'godotopenxr-*-release.aar'
    into '../demo/addons/godotopenxrvendors/.bin/android/release'
}

task copyGdExtensionConfigToAssets(type: Copy) {
    description 'Copy plugin.gdextension from the addons directory to the assets directory'

    from '../demo/addons/godotopenxrvendors/'
    include 'plugin.gdextension'
    into 'src/main/assets/addons/godotopenxrvendors/'
}

preBuild.dependsOn(copyGdExtensionConfigToAssets)
assemble.dependsOn(copyGdExtensionConfigToAssets)
assemble.finalizedBy(copyDebugAARToAddons)
assemble.finalizedBy(copyReleaseAARToAddons)
clean.dependsOn(cleanAssets)
clean.dependsOn(cleanCxx)
